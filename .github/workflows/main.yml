name: Status Feeds to Slack

on:
  schedule:
    - cron: "0 */12 * * *"     # every 12 minutes (UTC)
  workflow_dispatch:
  push:
  pull_request:

permissions:
  contents: write     # allow the monitor job to push updated state

concurrency:
  group: status-monitor
  cancel-in-progress: false

jobs:
  tests:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (incl. pytest)
        run: |
          pip install -r requirements.txt
          pip install pytest pyyaml

      - name: List repo files (debug)
        run: |
          pwd
          ls -R

      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:${GITHUB_WORKSPACE}" >> $GITHUB_ENV

      - name: Test with pytest
        working-directory: ${{ github.workspace }}
        run: pytest -q

  monitor:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}   # used for pushing state later
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run status monitor
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          FEEDS_YAML: ./feeds.yml
          STATE_PATH: ./status_state.json
        run: python main.py
        
      - name: Post run summary to Slack (Webhook)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          WEBHOOK="$(printf %s "${SLACK_WEBHOOK_URL}" | tr -d '\r\n' | xargs || true)"
          if [ -z "${WEBHOOK}" ]; then
            echo "SLACK_WEBHOOK_URL is empty. Set repository secret SLACK_WEBHOOK_URL."
          exit 1
          fi
            case "$WEBHOOK" in
            https://hooks.slack.com/*) : ;;  # looks good
            *) echo "SLACK_WEBHOOK_URL doesn't look like a Slack webhook URL."; exit 1;;
          esac
          STATUS="${{ job.status }}"
          EMOJI="❗"; [ "$STATUS" = "success" ] && EMOJI="✅"
          SUMMARY_JSON="$(cat run_summary.json 2>/dev/null || echo '{}')"
          FEEDS=$(jq -r '.feeds_processed // "?"' <<<"$SUMMARY_JSON")
          ALERTS=$(jq -r '.alerts_sent // "?"' <<<"$SUMMARY_JSON")
          PAYLOAD="$(jq -n --arg t "${EMOJI} Status Feeds to Slack — Run Complete" \
                    --arg s "*Status:* ${STATUS}\n*Repo:* ${GITHUB_REPOSITORY}\n*Run:* ${GITHUB_RUN_NUMBER}\n*Feeds processed:* ${FEEDS}\n*Alerts sent:* ${ALERTS}" \
                    '{blocks: [
                       {type:"header", text:{type:"plain_text", text:$t}},
                       {type:"section", text:{type:"mrkdwn", text:$s}}
                     ] }')"
          curl -sS -X POST -H 'Content-Type: application/json' \
            --data "$PAYLOAD" "$WEBHOOK"
          
      - name: Commit updated state (if changed)
        run: |
          if git diff --quiet --exit-code -- status_state.json; then
            echo "No state changes to commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add status_state.json
          # Use [skip ci] so this push doesn't trigger tests again
          git commit -m "chore(state): update status_state.json [skip ci]"
          git push
