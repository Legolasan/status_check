name: Status Feeds to Slack

on:
  schedule:
    - cron: "0 */12 * * *"     # every 12 minutes (UTC)
  workflow_dispatch:
  push:
  pull_request:

permissions:
  contents: write     # allow the monitor job to push updated state

concurrency:
  group: status-monitor
  cancel-in-progress: false

jobs:
  tests:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (incl. pytest)
        run: |
          pip install -r requirements.txt
          pip install pytest pyyaml

      - name: List repo files (debug)
        run: |
          pwd
          ls -R

      - name: Add repo root to PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:${GITHUB_WORKSPACE}" >> $GITHUB_ENV

      - name: Test with pytest
        working-directory: ${{ github.workspace }}
        run: pytest -q

  monitor:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}   # used for pushing state later
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run status monitor
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          FEEDS_YAML: ./feeds.yml
          STATE_PATH: ./status_state.json
        run: python main.py
        
      - name: Post run summary to Slack (Webhook)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          SUMMARY=$(cat run_summary.json 2>/dev/null || echo '{}')
          if [ "$STATUS" = "success" ]; then EMOJI="✅"; else EMOJI="❗"; fi
          cat > payload.json <<'JSON'
            {
              "blocks": [
                { "type": "header", "text": { "type": "plain_text", "text": "Status Feeds to Slack — Run Complete" } },
                { "type": "section", "text": { "type": "mrkdwn", "text": "SUMMARY_PLACEHOLDER" } }
              ]
            }
          JSON
          SUMMARY_TEXT="*Status:* ${STATUS}\n*Repo:* $GITHUB_REPOSITORY\n*Run:* $GITHUB_RUN_NUMBER\n*Feeds processed:* $(jq -r '.feeds_processed // "?"' <<<"$SUMMARY")\n*Alerts sent:* $(jq -r '.alerts_sent // "?"' <<<"$SUMMARY")"
          jq --arg t "${EMOJI} ${SUMMARY_TEXT}" '.blocks[1].text.text = $t' payload.json > payload_final.json
          curl -sS -X POST -H 'Content-type: application/json' --data @payload_final.json "$SLACK_WEBHOOK_URL"
          
      - name: Commit updated state (if changed)
        run: |
          if git diff --quiet --exit-code -- status_state.json; then
            echo "No state changes to commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add status_state.json
          # Use [skip ci] so this push doesn't trigger tests again
          git commit -m "chore(state): update status_state.json [skip ci]"
          git push
